# grind-hackathon
## Rules
1. Build on Abstract Chain - Create an app or game that runs on the [Abstract Chain blockchain](https://abs.xyz/). Make sure it's functional and demonstrates the power of $GRIND.
2. INCORPORATE THE BRANDS - Include the [Grind Hamster](https://x.com/GrindTheCoin/), [Bearish Bear](https://x.com/bearish_af), or [Plague of Frog](https://x.com/ThePlagueNFT) mascots in your project. Get creative with how you integrate them into your user experience.
3. USE $GRIND TOKEN (Optional) - It's recommended to use the $GRIND token in your project, but it's not required. It doesn't have to be perfect, just creative!
4. DEPLOY ON TESTNET - Deploy your app on the Abstract testnet to save gas and ensure it's accessible to the judges and community. Workshops will be held on April 14th to help you get started.
5. BONUS: COFFEE-RELATED USE CASE - For extra points, create a use case related to Making Coffee - our flagship commerce platform. Develop solutions for inventory management via NFTs, referral rewards, farmer tipping, or customer support using our virtual hamster AI assistant.
## Project Idea
### Description
- Short Description: On-chain swear jar
- Description - When you swear, you click a button and send $grind. 10% chance you lose the $grind, 90% chance the $grind goes into your jar. When there's a certain amount of $grind built up in your 'jar', you can withdraw it. 50% of 'Lost' $grind gets donated to charity once enough accumulates. Other 50% of 'lost' $grind gets burned. If you 'lose' the $grind, the Grind Hamster pops up on the screen and does a dance to mock you. Plus a swear leaderboard.
### Requirements
- use pnpm and isolate packages and versions
- use javascript and nextjs for frontend
- typescript can be used for the smart contract
- Use the latest version of all packages (use version info from pnpm to find latest)
  - react >= 19.1
  - tailwindcss/postcss >= 4.1.4
- use abstract testnet (https://docs.abs.xyz/connect-to-abstract)
  - Abstract Testnet network details
    - Name: Abstract Testnet
    - Chain ID: 11124
    - RPC URL: https://api.testnet.abs.xyz
    - RPC URL Websocket: wss://api.testnet.abs.xyz/ws
    - Currency Symbol: ETH
- use rainbowkit in frontend for wallet connection (https://docs.abs.xyz/abstract-global-wallet/agw-react/integrating-with-rainbowkit)
  - agw-react package includes an option to include Abstract Global Wallet as a connection option in RainbowKit ConnectButton
    - https://www.npmjs.com/package/@abstract-foundation/agw-react?activeTab=readme
- user should be able to connect AGW wallet or metamask wallet, but only on abstract testnet network
- User can specifiy how much they want to place into the jar each time they swear, and can change the amount at any time.
  - Default amount should be 1 $GRIND
- Hosting frontend in Vercel.
- Use Hardhat for smart contract development (https://docs.abs.xyz/build-on-abstract/smart-contracts/hardhat/get-started)
- smart contract for the swear jar on-chain functionality
- smart contract will have a function for depositing $grind
- when depositing grind, smart contract will hold $grind such that only the depositer can withdrawl.
- smart contract deposit function is made such that there's a 10% chance that the $grind is burned instead.
- smart contract will define a minimum total amount that must be deposited by wallet before they can withdraw.
- smart contract should have functions to update burn percent and min withdraw amount
- home page will have a box for user to enter amount of $grind coin to send and a button to send.
- the amount box and button should be in the middle of the screen and visible when you first visit the page
- There should be instructions listed below the button.
- wallet connect button should be top right of the page
- when user clicks the button to send, call contract function to deposit
- if deposit is successful, pop up message with hamster dancing and leave it up until user clicks button to return
  - pop up message should have green background (#00FF00) and display the dancing hamster .gif in the center of the page
- if contract instead burns the tokens, pop up different message with hamster dancing and leave it up until user clicks button to return
- color scheme of website should be green (#00FF00) and black, with hints of orange and pink.